using Manager;
using Manager.Contract;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace Gov.Cscp.Victims.Public.Controllers
{
    [Route("api/[controller]")]
    [Authorize]
    public class ProgramController(CurrencyHandlers currencyHandler, ProgramHandlers programHandlers, InvoiceHandlers invoiceHandler) : Controller
    {
        // TODO add ErrorHandler ActionFilter that returns 500 status code and logs the exception
        [HttpGet("Approved")]
        public async Task<IActionResult> GetApproved()
        {
            // use CurrencyQuery to query "all the currencies that match this one currency code...don't ask me..."
            var currencyQuery = new CurrencyQuery();
            var currencyResult = await currencyHandler.Handle(currencyQuery);
            
            var invoiceDate = GetInvoiceDate();

            var emptyMessage = new ProgramResultEmptyMessage();
            var programResult = await programHandlers.Handle(emptyMessage);

            foreach (var program in programResult.Programs) 
            {
                var invoiceQuery = new InvoiceQuery();
                invoiceQuery.ProgramId = program.Id;
                invoiceQuery.InvoiceDate = invoiceDate;
                invoiceQuery.Origin = Origin.AutoGenerated;
                // check if invoice has been already created
                var invoiceResult = await invoiceHandler.Handle(invoiceQuery);
                if (invoiceResult.Invoices.Any())
                {
                    continue;
                }

                //var scheduledPayment = GetScheduledPayment(program.Id)
            }

            return new JsonResult(programResult);
        }

        // TODO see if this is the right place for this method
        private DateTime GetInvoiceDate()
        {
            var firstQuarterDate = new DateTime(DateTime.Today.Year, 1, 15, DateTime.Today.Hour, DateTime.Today.Minute, DateTime.Today.Second, DateTimeKind.Local); //15th January
            var secondQuarterDate = new DateTime(DateTime.Today.Year, 4, 15, DateTime.Today.Hour, DateTime.Today.Minute, DateTime.Today.Second, DateTimeKind.Local); //15th April
            var thirdQuarterDate = new DateTime(DateTime.Today.Year, 7, 15, DateTime.Today.Hour, DateTime.Today.Minute, DateTime.Today.Second, DateTimeKind.Local); //15th July
            var fourthQuarterDate = new DateTime(DateTime.Today.Year, 10, 15, DateTime.Today.Hour, DateTime.Today.Minute, DateTime.Today.Second, DateTimeKind.Local); //15th October
            var fifthQuarterDate = new DateTime(DateTime.Today.Year + 1, 1, 15, DateTime.Today.Hour, DateTime.Today.Minute, DateTime.Today.Second, DateTimeKind.Local); //15th January next year

            if (DateTime.Today > firstQuarterDate && DateTime.Today <= secondQuarterDate)
            {
                return secondQuarterDate.AddDays(-3);
            }
            else if (DateTime.Today > secondQuarterDate && DateTime.Today <= thirdQuarterDate)
            {
                return thirdQuarterDate.AddDays(-3);
            }
            else if (DateTime.Today > thirdQuarterDate && DateTime.Today <= fourthQuarterDate)
            {
                return fourthQuarterDate.AddDays(-3);
            }
            else if (DateTime.Today <= firstQuarterDate)
            {
                return firstQuarterDate.AddDays(-3);
            }
            else
            {
                return fifthQuarterDate.AddDays(-3);
            }
        }
    }
}
